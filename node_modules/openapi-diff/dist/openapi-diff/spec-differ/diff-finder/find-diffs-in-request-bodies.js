"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const JsonSchemaDiff = require("json-schema-diff");
const util_1 = require("util");
const create_difference_1 = require("./create-difference");
const defaultJsonSchemaDetails = () => ({
    isDefinedInOrigin: false,
    path: [],
    schema: {}
});
const toJsonSchemaDetails = (requestBody) => {
    if (util_1.isUndefined(requestBody.jsonSchema)) {
        return defaultJsonSchemaDetails();
    }
    return { path: requestBody.jsonSchema.originalPath, schema: requestBody.jsonSchema.value, isDefinedInOrigin: true };
};
const createSpecOrigin = (rootPathInSpec, jsonSchemaDifferenceValue) => {
    return {
        originalPath: [...rootPathInSpec, ...jsonSchemaDifferenceValue.path],
        value: jsonSchemaDifferenceValue.value
    };
};
const createSpecOrigins = (schemaOrigin, jsonSchemaDifferenceValues) => {
    if (schemaOrigin.isDefinedInOrigin) {
        return jsonSchemaDifferenceValues
            .map((jsonSchemaDifferenceValue) => createSpecOrigin(schemaOrigin.path, jsonSchemaDifferenceValue));
    }
    return [];
};
const createRequestBodyScopeDifference = (jsonSchemaDifference, jsonSchemaOrigins, action) => create_difference_1.createDifference({
    action,
    destinationSpecOrigins: createSpecOrigins(jsonSchemaOrigins.destination, jsonSchemaDifference.destinationValues),
    details: { value: jsonSchemaDifference.value },
    propertyName: 'request.body.scope',
    source: 'json-schema-diff',
    sourceSpecOrigins: createSpecOrigins(jsonSchemaOrigins.source, jsonSchemaDifference.sourceValues)
});
const createRequestBodyScopeAddDifferences = (jsonSchemaDifferences, jsonSchemaOrigins) => {
    const addedByDestinationDifferences = jsonSchemaDifferences
        .filter((diffResult) => diffResult.addedByDestinationSchema);
    return addedByDestinationDifferences
        .map((jsonSchemaDifference) => createRequestBodyScopeDifference(jsonSchemaDifference, jsonSchemaOrigins, 'add'));
};
const createRequestBodyScopeRemoveDifferences = (jsonSchemaDifferences, originalRootPaths) => {
    const removedByDestinationDifferences = jsonSchemaDifferences
        .filter((diffResult) => diffResult.removedByDestinationSchema);
    return removedByDestinationDifferences
        .map((jsonSchemaDifference) => createRequestBodyScopeDifference(jsonSchemaDifference, originalRootPaths, 'remove'));
};
exports.findDifferencesInRequestBodies = (sourceRequestBody, destinationRequestBody) => __awaiter(this, void 0, void 0, function* () {
    const sourceSchema = toJsonSchemaDetails(sourceRequestBody);
    const destinationSchema = toJsonSchemaDetails(destinationRequestBody);
    const diffResults = yield JsonSchemaDiff.diffSchemas({
        destinationSchema: destinationSchema.schema,
        sourceSchema: sourceSchema.schema
    });
    const jsonSchemaOrigins = {
        destination: destinationSchema,
        source: sourceSchema
    };
    const addedScopeDifferences = createRequestBodyScopeAddDifferences(diffResults.differences, jsonSchemaOrigins);
    const removedScopeDifferences = createRequestBodyScopeRemoveDifferences(diffResults.differences, jsonSchemaOrigins);
    return [...addedScopeDifferences, ...removedScopeDifferences];
});
