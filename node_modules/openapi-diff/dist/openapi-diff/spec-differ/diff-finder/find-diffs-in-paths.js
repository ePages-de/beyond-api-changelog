"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const get_added_keys_from_objects_1 = require("./common/get-added-keys-from-objects");
const get_common_keys_from_objects_1 = require("./common/get-common-keys-from-objects");
const get_removed_keys_from_objects_1 = require("./common/get-removed-keys-from-objects");
const create_difference_1 = require("./create-difference");
const find_diffs_in_operations_1 = require("./find-diffs-in-operations");
const normalize_path_1 = require("./normalize-path");
const findAddedPathDifferences = (sourcePathItems, destinationPathItems) => {
    return get_added_keys_from_objects_1.getAddedKeysFromObjects(sourcePathItems, destinationPathItems)
        .map((addedPathName) => {
        const addedDestinationPathItem = destinationPathItems[addedPathName];
        return create_difference_1.createDifference({
            action: 'add',
            destinationSpecOrigins: [addedDestinationPathItem.originalValue],
            propertyName: 'path',
            source: 'openapi-diff',
            sourceSpecOrigins: []
        });
    });
};
const findRemovedPathDifferences = (sourcePathItems, destinationPathItems) => {
    return get_removed_keys_from_objects_1.getRemovedKeysFromObjects(sourcePathItems, destinationPathItems)
        .map((removedPathName) => {
        const removedSourcePathItem = sourcePathItems[removedPathName];
        return create_difference_1.createDifference({
            action: 'remove',
            destinationSpecOrigins: [],
            propertyName: 'path',
            source: 'openapi-diff',
            sourceSpecOrigins: [removedSourcePathItem.originalValue]
        });
    });
};
const findMatchingPathDifferences = (sourcePathItems, destinationPathItems) => __awaiter(this, void 0, void 0, function* () {
    const matchingPaths = get_common_keys_from_objects_1.getCommonKeysFromObjects(sourcePathItems, destinationPathItems);
    const whenFindDifferencesInAllOperations = matchingPaths.map((matchingPathItem) => find_diffs_in_operations_1.findDifferencesInOperations(sourcePathItems[matchingPathItem].operations, destinationPathItems[matchingPathItem].operations));
    const differencesByOperation = yield Promise.all(whenFindDifferencesInAllOperations);
    const flattenDifferences = differencesByOperation.reduce((allDifferences, operationDifferences) => [...allDifferences, ...operationDifferences], []);
    return flattenDifferences;
});
const normalizePathItems = (parsedPathItems) => Object.keys(parsedPathItems).reduce((normalizedParsedPathItems, pathName) => {
    const parsedPathItem = parsedPathItems[pathName];
    const normalizedPathName = normalize_path_1.normalizePath(pathName);
    normalizedParsedPathItems[normalizedPathName] = Object.assign({}, parsedPathItem, { pathName: normalizedPathName });
    return normalizedParsedPathItems;
}, {});
exports.findDiffsInPaths = (sourcePathItems, destinationPathItems) => __awaiter(this, void 0, void 0, function* () {
    const normalizedSourcePathItems = normalizePathItems(sourcePathItems);
    const normalizedDestinationPathItems = normalizePathItems(destinationPathItems);
    const addedPaths = findAddedPathDifferences(normalizedSourcePathItems, normalizedDestinationPathItems);
    const removedPaths = findRemovedPathDifferences(normalizedSourcePathItems, normalizedDestinationPathItems);
    const matchingPaths = yield findMatchingPathDifferences(normalizedSourcePathItems, normalizedDestinationPathItems);
    return [...addedPaths, ...removedPaths, ...matchingPaths];
});
