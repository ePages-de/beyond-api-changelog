"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const parse_x_properties_1 = require("../common/parse-x-properties");
const path_builder_1 = require("../common/path-builder");
const typeCheckedOpenApi3Methods = {
    delete: undefined,
    get: undefined,
    head: undefined,
    options: undefined,
    patch: undefined,
    post: undefined,
    put: undefined,
    trace: undefined
};
const isOpenApi3Method = (propertyName) => Object.keys(typeCheckedOpenApi3Methods).indexOf(propertyName) >= 0;
const isRequestBodyObject = (requestBody) => !!requestBody && !!requestBody.content;
const parsedRequestBodyJsonSchema = (requestBodyObject, pathBuilder) => {
    if (isRequestBodyObject(requestBodyObject) && requestBodyObject.content['application/json']) {
        return {
            originalPath: pathBuilder.withChild('content').withChild('application/json').withChild('schema').build(),
            value: requestBodyObject.content['application/json'].schema
        };
    }
    return undefined;
};
const parsedRequestBody = (requestBody, pathBuilder) => {
    const originalPath = pathBuilder.withChild('requestBody');
    return {
        jsonSchema: parsedRequestBodyJsonSchema(requestBody, originalPath),
        originalValue: {
            originalPath: originalPath.build(),
            value: requestBody
        }
    };
};
const parseOperations = (pathItemObject, pathBuilder) => {
    return Object.keys(pathItemObject)
        .filter(isOpenApi3Method)
        .reduce((accumulator, method) => {
        const operationObject = pathItemObject[method];
        const originalPath = pathBuilder.withChild(method);
        const requestBody = operationObject
            ? parsedRequestBody(operationObject.requestBody, originalPath)
            : parsedRequestBody(undefined, originalPath);
        const responsesPath = originalPath.withChild('responses');
        const responses = operationObject
            ? parseResponses(operationObject.responses, responsesPath)
            : {};
        accumulator[method] = {
            originalValue: {
                originalPath: originalPath.build(),
                value: operationObject
            },
            requestBody,
            responses
        };
        return accumulator;
    }, {});
};
const parsePaths = (paths, pathBuilder) => Object.keys(paths).reduce((accumulator, pathName) => {
    const pathItemObject = paths[pathName];
    const originalPath = pathBuilder.withChild(pathName);
    accumulator[pathName] = {
        operations: parseOperations(pathItemObject, originalPath),
        originalValue: {
            originalPath: originalPath.build(),
            value: pathItemObject
        },
        pathName
    };
    return accumulator;
}, {});
const parseResponses = (responses, pathBuilder) => {
    return Object.keys(responses).reduce((accumulator, statusCode) => {
        const originalPath = pathBuilder.withChild(statusCode);
        accumulator[statusCode] = {
            originalValue: {
                originalPath: originalPath.build(),
                value: responses[statusCode]
            }
        };
        return accumulator;
    }, {});
};
exports.parseOpenApi3Spec = (spec) => {
    const pathBuilder = path_builder_1.PathBuilder.createRootPathBuilder();
    return {
        format: 'openapi3',
        paths: parsePaths(spec.paths, pathBuilder.withChild('paths')),
        xProperties: parse_x_properties_1.parseXPropertiesInObject(spec, pathBuilder)
    };
};
