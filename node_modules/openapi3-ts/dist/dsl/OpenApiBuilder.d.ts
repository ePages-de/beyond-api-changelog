import * as oa from "../model";
export declare class OpenApiBuilder {
    rootDoc: oa.OpenAPIObject;
    static create(): OpenApiBuilder;
    constructor();
    getSpec(): oa.OpenAPIObject;
    getSpecAsJson(replacer?: (key: string, value: any) => any, space?: string | number): string;
    getSpecAsYaml(): string;
    private static isValidOpenApiVersion(v?);
    addOpenApiVersion(openApiVersion: string): OpenApiBuilder;
    addInfo(info: oa.InfoObject): OpenApiBuilder;
    addContact(contact: oa.ContactObject): OpenApiBuilder;
    addLicense(license: oa.LicenseObject): OpenApiBuilder;
    addTitle(title: string): OpenApiBuilder;
    addDescription(description: string): OpenApiBuilder;
    addTermsOfService(termsOfService: string): OpenApiBuilder;
    addVersion(version: string): OpenApiBuilder;
    addPath(path: string, pathItem: oa.PathItemObject): OpenApiBuilder;
    addSchema(name: string, schema: oa.SchemaObject): OpenApiBuilder;
    addResponse(name: string, response: oa.ResponseObject): OpenApiBuilder;
    addParameter(name: string, parameter: oa.ParameterObject): OpenApiBuilder;
    addExample(name: string, example: oa.ExampleObject): OpenApiBuilder;
    addRequestBody(name: string, reqBody: oa.RequestBodyObject): OpenApiBuilder;
    addHeader(name: string, header: oa.HeaderObject): OpenApiBuilder;
    addSecurityScheme(name: string, secScheme: oa.SecuritySchemeObject): OpenApiBuilder;
    addLink(name: string, link: oa.LinkObject): OpenApiBuilder;
    addCallback(name: string, callback: oa.CallbackObject): OpenApiBuilder;
    addServer(server: oa.ServerObject): OpenApiBuilder;
    addTag(tag: oa.TagObject): OpenApiBuilder;
    addExternalDocs(extDoc: oa.ExternalDocumentationObject): OpenApiBuilder;
}
